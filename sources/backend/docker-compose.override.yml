version: '3.4'

services:
  library_gateway:
    restart: on-failure
    container_name: "library_gateway"
    networks:
      - "library_services_net"
    image: envoyproxy/envoy:v1.11.1
    ports:
      - "6000:80"
    volumes:
      - ./envoy.yaml:/etc/envoy/envoy.yaml
 
  library_family:
    image: ${DOCKER_REGISTRY-}library_family
    container_name: "library_family"
    restart: on-failure
    volumes:
      - ~/docker/logs/family:/app/logs
    networks:
      - "library_services_net"
    environment:
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - POSTGRESQL_HOST=$POSTGRESQL_HOST
      - POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE
      - POSTGRESQL_USER=$POSTGRESQL_USER
      - POSTGRESQL_PORT=$POSTGRESQL_PORT
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PASSWORD=$REDIS_PASSWORD
      - AUDIENCE_KEY=$AUDIENCE_KEY
      - AES_KEY=$AES_KEY
      - TZ=$TIME_ZONE
      - MINIO_HOST=$MINIO_HOST
      - MINIO_ROOT_USER=$MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD
    depends_on:
      - postgresql
      - redis
    ports:
      - "7000:80"
    build:
      context: .
      dockerfile: LibraryServices.FamilyService/Dockerfile

  library_identity:
    image: ${DOCKER_REGISTRY-}library_identity
    container_name: "library_identity"
    restart: on-failure
    networks:
      - "library_services_net"
    volumes:
      - ~/docker/logs/identity:/app/logs
    environment:
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - POSTGRESQL_HOST=$POSTGRESQL_HOST
      - POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE
      - POSTGRESQL_USER=$POSTGRESQL_USER
      - POSTGRESQL_PORT=$POSTGRESQL_PORT
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PASSWORD=$REDIS_PASSWORD
      - AUDIENCE_KEY=$AUDIENCE_KEY
      - AES_KEY=$AES_KEY
      - TZ=$TIME_ZONE  
    depends_on:
      - postgresql
      - redis
    ports:
      - "8000:80"
    build:
      context: .
      dockerfile: LibraryServices.IdentityService/Dockerfile

  library_package:
    image: ${DOCKER_REGISTRY-}library_package
    container_name: "library_package"
    restart: on-failure   
    networks:
      - "library_services_net"
    volumes:
      - ~/docker/logs/package:/app/logs
    environment:
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - POSTGRESQL_HOST=$POSTGRESQL_HOST
      - POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE
      - POSTGRESQL_USER=$POSTGRESQL_USER
      - POSTGRESQL_PORT=$POSTGRESQL_PORT
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PASSWORD=$REDIS_PASSWORD
      - AUDIENCE_KEY=$AUDIENCE_KEY
      - AES_KEY=$AES_KEY
      - TZ=$TIME_ZONE  
    depends_on:
      - postgresql
      - redis
    ports:
      - "9000:80"
    build:
      context: .
      dockerfile: LibraryServices.PackageService/Dockerfile

  library_parameter:
    image: ${DOCKER_REGISTRY-}library_parameter
    container_name: "library_parameter"
    restart: on-failure
    networks:
      - "library_services_net"
    volumes:
      - ~/docker/logs/parameter:/app/logs
    environment:
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - POSTGRESQL_HOST=$POSTGRESQL_HOST
      - POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE
      - POSTGRESQL_USER=$POSTGRESQL_USER
      - POSTGRESQL_PORT=$POSTGRESQL_PORT
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PASSWORD=$REDIS_PASSWORD
      - AUDIENCE_KEY=$AUDIENCE_KEY
      - AES_KEY=$AES_KEY
      - TZ=$TIME_ZONE  
    depends_on:
      - postgresql
      - redis
    ports:
      - "10000:80"
    build:
      context: .
      dockerfile: LibraryServices.ParameterService/Dockerfile

  postgresql:
    container_name: "postgresql"
    image: "postgres"
    restart: always
    ports:
      - "$POSTGRESQL_PORT:5432"
    networks:
      - "library_services_net"
    environment:
      TZ: 'GMT+8'
      PGTZ: 'GMT+8'

  redis:
    networks:
      - "library_services_net"
    restart: always
    container_name: "redis"
    image: "redis"
    ports:
      - "$REDIS_PORT:6379"
    command: redis-server --requirepass $REDIS_PASSWORD

  # minio:
  #   networks:
  #     - "library_services_net"
  #   container_name: "minio"
  #   image: minio/minio
  #   ports:
  #     - "6001:9000" #api port
  #     - "6002:9001" #console port 
  #   environment:
  #     MINIO_ROOT_USER: $MINIO_ROOT_USER     # They are equivalent:  MINIO_ACCESS_KEY=MINIO_ROOT_USER MINIO_SECRET_KEY=MINIO_ROOT_PASSWORD
  #     MINIO_ROOT_PASSWORD: $MINIO_ROOT_PASSWORD # least 8 characters
  #   restart: always
  #   privileged: true
  #   command: server --console-address ':9001' /data
  #   volumes:
  #     - ~/docker/minio/data:/data               # mapping the data directory in the current directory to the /data directory in the container
  #     - ~/docker/minio/config:/root/.minio/     # mapping configuration directory

  seqcli:
    image: datalust/seqcli:latest
    container_name: "seqcli"
    command: apikey create -t newapikey --token $SEQ_TOKEN -s http://seq
    depends_on:
      - seq
    restart: on-failure
    networks:
      - library_services_net

  seq:
    image: datalust/seq:latest
    container_name: "seq"
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:80"
    networks:
      - library_services_net

networks:
    library_services_net:
        driver: bridge
       
